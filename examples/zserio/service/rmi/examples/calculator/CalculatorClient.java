package zserio.service.rmi.examples.calculator;

import java.util.Scanner;

import zserio.service.rmi.RMIClient;

import rmi.examples.calculator.gen.calculator.Calculator;
import rmi.examples.calculator.gen.calculator.I32;
import rmi.examples.calculator.gen.calculator.U64;
import rmi.examples.calculator.gen.calculator.Double;

public class CalculatorClient
{
    public static void main(String args[])
    {
        try
        {
            System.out.println("Welcome to Zserio Calculator HTTP Client example!");
            System.out.print("Waiting for connection (terminate with ^C) ...");

            // RMIClient from ZserioServiceRmi library
            final RMIClient rmiClient = new RMIClient(Calculator.CalculatorService.serviceFullName());
            // Calculator client generated by Zserio, uses rmiClient as an ServiceInterface
            final Calculator.CalculatorClient calculatorClient = new Calculator.CalculatorClient(rmiClient);

            System.out.println(" OK!");
            System.out.println("Write 'h' + ENTER for help.");

            Mode mode = Mode.POWER_OF_TWO;
            final Scanner scanner = new Scanner(System.in);

            while (true)
            {
                System.out.print((mode == Mode.POWER_OF_TWO ? "p" : "s") + "> ");

                if (!scanner.hasNextLine())
                    break;

                final String input = scanner.nextLine();
                if (input.isEmpty())
                    continue;

                if (input.charAt(0) == 'q')
                {
                    System.out.println("Quitting.");
                    Thread.sleep(1000); // wait a little bit for a potential responses
                    System.exit(0);
                }

                if (input.charAt(0) == 'h')
                {
                    printHelp();
                    continue;
                }

                if (input.charAt(0) == 'p')
                {
                    mode = Mode.POWER_OF_TWO;
                    System.out.println("Mode set to powerOfTwo(int32)");
                    continue;
                }

                if (input.charAt(0) == 's')
                {
                    mode = Mode.SQUARE_ROOT;
                    System.out.println("Mode set to squareRoot(double)");
                    continue;
                }

                if (mode == Mode.POWER_OF_TWO)
                    powerOfTwo(calculatorClient, input);
                else
                    squareRoot(calculatorClient, input);
            }
        }
        catch (Exception e)
        {
            System.err.println("CalculatorClient error: " + e.getMessage());
        }
    }

    private enum Mode
    {
        POWER_OF_TWO,
        SQUARE_ROOT
    }

    private static void powerOfTwo(Calculator.CalculatorClient client, String input)
    {
        I32 request;
        try
        {
            final int value = Integer.parseInt(input);
            request = new I32(value);
        }
        catch (Exception e)
        {
            System.out.println("Error: '" + input + "' cannot be converted to int32!");
            System.out.println(e.getMessage());
            return;
        }

        try
        {
            final U64 response = client.powerOfTwoMethod(request);
            System.out.println(response.getValue());
        }
        catch (Exception e)
        {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private static void squareRoot(Calculator.CalculatorClient client, String input)
    {
        Double request;
        try
        {
            final double value = java.lang.Double.parseDouble(input);
            request = new Double(value);
        }
        catch (Exception e)
        {
            System.out.println("Error: '" + input + "' cannot be converted to double!");
            System.out.println(e.getMessage());
            return;
        }

        try
        {
            final Double response = client.squareRootMethod(request);
            System.out.println(response.getValue());
        }
        catch (Exception e)
        {
            System.out.println("Error: " + e.getMessage());
        }
    }

    private static void printHelp()
    {
        System.out.println("Help:");
        System.out.println(" INPUT        Any valid input for the current mode.");
        System.out.println(" p            Sets powerOfTwo(int32) mode.");
        System.out.println(" s            Sets squareRoot(double) mode.");
        System.out.println(" h            Prints this help.");
        System.out.println(" q            Quits the client.");
        System.out.println("");
        System.out.println("Note that the letter before the '>' denotes the current mode.");
    }
}
